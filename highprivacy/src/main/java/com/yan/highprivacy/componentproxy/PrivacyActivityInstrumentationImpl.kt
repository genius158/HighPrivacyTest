package com.yan.highprivacy.componentproxyimport android.annotation.SuppressLintimport android.app.Activityimport android.app.Instrumentationimport android.content.ComponentNameimport android.content.Contextimport android.content.Intentimport android.os.Bundleimport android.os.IBinderimport androidx.annotation.Keepimport java.lang.reflect.Fieldimport java.lang.reflect.Method/** * @author Bevan (Contact me: https://github.com/genius158) * @since 2020/9/23 * startActivity 拦截，Instrumentation hock 的实现 */@SuppressLint("DiscouragedPrivateApi")internal class PrivacyActivityInstrumentationImpl(    private val baseContext: Context,    private val originalInstrumentation: Instrumentation) : Instrumentation(),    PrivacyCallActivityStart {    companion object {        var privacyActivityInstrumentationImpl: PrivacyActivityInstrumentationImpl? = null        private var instrumentationField: Field? = null        private var activityThread: Any? = null        private var instrumentationOriginal: Instrumentation? = null        /**         * 一下反射hock，再最新android11中仍在灰名单中，所以还可以调用         */        @SuppressLint("PrivateApi")        @Throws(Exception::class)        fun hookInstrumentation(            context: Context,            instrumentation: Instrumentation? = null        ) {            if (activityThread == null) {                val contextImpClass = Class.forName("android.app.ContextImpl")                val mainThreadField = contextImpClass.getDeclaredField("mMainThread")                mainThreadField.isAccessible = true                activityThread = mainThreadField.get(context)            }            if (instrumentationField == null) {                val activityThreadClass = Class.forName("android.app.ActivityThread")                instrumentationField = activityThreadClass.getDeclaredField("mInstrumentation")                instrumentationField?.isAccessible = true            }            if (instrumentationOriginal == null) {                instrumentationOriginal =                    instrumentationField?.get(activityThread) as Instrumentation            }            val instField = instrumentationField            val instOriginal = instrumentationOriginal            requireNotNull(instField) { "Something went wrong" }            requireNotNull(instOriginal) { "Something went wrong" }            if (instrumentation == null) {                if (privacyActivityInstrumentationImpl == null) {                    instOriginal.let {                        privacyActivityInstrumentationImpl =                            PrivacyActivityInstrumentationImpl(context, it)                    }                }                instField.set(activityThread, privacyActivityInstrumentationImpl)            } else {                instField.set(activityThread, instrumentation)            }        }    }    override fun getContext() = baseContext    private var startActivityMethod: Method? = null    /**     * @Keep 方便混淆设置     */    @SuppressLint("DiscouragedPrivateApi")    @Keep    @Throws(Exception::class)    fun execStartActivity(        who: Context?,        contextThread: IBinder?,        token: IBinder?,        target: Activity?,        intent: Intent?,        requestCode: Int,        options: Bundle?    ): ActivityResult? {        intent?.let {            it.setComponent(                ComponentName(                    baseContext,                    callStartActImpl.callPrivacyActClass(it.component!!.className, it)                )            )        }        if (startActivityMethod == null) {            startActivityMethod = Instrumentation::class.java.getDeclaredMethod(                "execStartActivity",                Context::class.java,                IBinder::class.java,                IBinder::class.java,                Activity::class.java,                Intent::class.java,                Int::class.javaPrimitiveType,                Bundle::class.java            )                .also { filed -> filed.isAccessible = true }        }        return startActivityMethod!!.invoke(            originalInstrumentation,            who,            contextThread,            token,            target,            intent,            requestCode,            options        ) as ActivityResult    }    override fun newActivity(        cl: ClassLoader?,        className: String,        intent: Intent?    ): Activity {        val fClassName = callStartActImpl.callPrivacyActClass(className, intent)        intent?.component = ComponentName(baseContext, fClassName)        return originalInstrumentation.newActivity(cl, fClassName, intent)    }    private var callStartActImpl = PrivacyCallActivityStartRealImpl(this)    override fun callPrivacyActClass(className: String, intent: Intent?): String = className    override fun callOriginalPrivacyActStart(context: Context) {        // 授权流程走完，还原原本的instrumentation        instrumentationOriginal?.let { hookInstrumentation(context, it) }        release()    }    private fun release() {        privacyActivityInstrumentationImpl = null        instrumentationField = null        activityThread = null        instrumentationOriginal = null    }}